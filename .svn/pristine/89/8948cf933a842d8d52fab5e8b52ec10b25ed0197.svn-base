###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     04/Mar/2014  15:51:30 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\proj\TC007_OBD_STM32_MB\bootloader\bootloader_src\ymo #
#                    dem.c                                                    #
#    Command line =  D:\proj\TC007_OBD_STM32_MB\bootloader\bootloader_src\ymo #
#                    dem.c -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN              #
#                    D:\proj\TC007_OBD_STM32_MB\bootloader\IAR_STM32_BOOT\Deb #
#                    ug\List\ -o D:\proj\TC007_OBD_STM32_MB\bootloader\IAR_ST #
#                    M32_BOOT\Debug\Obj\ --no_cse --no_unroll --no_inline     #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_3\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\proj\TC007_OBD_STM32_MB\bootloader\IAR_STM3 #
#                    2_BOOT\.\ -I D:\proj\TC007_OBD_STM32_MB\bootloader\IAR_S #
#                    TM32_BOOT\..\bootloader_src\ -I                          #
#                    D:\proj\TC007_OBD_STM32_MB\bootloader\IAR_STM32_BOOT\..\ #
#                    bootloader_src\library\ -I D:\proj\TC007_OBD_STM32_MB\bo #
#                    otloader\IAR_STM32_BOOT\..\bootloader_src\library\inc\   #
#                    -Ol --use_c++_inline --require_prototypes                #
#    List file    =  D:\proj\TC007_OBD_STM32_MB\bootloader\IAR_STM32_BOOT\Deb #
#                    ug\List\ymodem.lst                                       #
#    Object file  =  D:\proj\TC007_OBD_STM32_MB\bootloader\IAR_STM32_BOOT\Deb #
#                    ug\Obj\ymodem.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\proj\TC007_OBD_STM32_MB\bootloader\bootloader_src\ymodem.c
      1          /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
      2          * File Name          : ymodem.c
      3          * Author             : MCD Application Team
      4          * Version            : V1.0
      5          * Date               : 10/08/2007
      6          * Description        : This file provides all the software functions related to
      7          *                      the ymodem protocol.
      8          ********************************************************************************
      9          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     11          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     12          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     13          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     14          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15          *******************************************************************************/
     16          
     17          /* Includes ------------------------------------------------------------------*/
     18          #include "common.h"
     19          #include "stm32f10x_flash.h"
     20          
     21          /* Private typedef -----------------------------------------------------------*/
     22          /* Private define ------------------------------------------------------------*/
     23          /* Private macro -------------------------------------------------------------*/
     24          /* Private variables ---------------------------------------------------------*/
     25          u8 file_name[FILE_NAME_LENGTH];
     26          uint32 FlashDestination = ApplicationAddress; /* Flash user program offset */
     27          uint16_t PageSize = 0x800; // 2k
     28          uint32_t EraseCounter = 0x0;
     29          uint32_t NbrOfPage = 0;
     30          FLASH_Status FLASHStatus = FLASH_COMPLETE;
     31          u32 RamSource;
     32          extern u8 tab_1024[1024];
     33          
     34          /* Private function prototypes -----------------------------------------------*/
     35          /* Private functions ---------------------------------------------------------*/
     36          /*******************************************************************************
     37          * Function Name  : Receive_Byte
     38          * Description    : Receive byte from sender
     39          * Input          : - c: Character
     40          *                  - timeout: Timeout
     41          * Output         : None
     42          * Return         : 0: Byte received
     43          *                  -1: Timeout
     44          *******************************************************************************/
     45          static  s32 Receive_Byte (u8 *c, u32 timeout)
     46          {
     47            while (timeout-- > 0)
     48            {
     49              if (SerialKeyPressed(c) == 1)
     50              {
     51                return 0;
     52              }
     53            }
     54            return -1;
     55          }
     56          
     57          /*******************************************************************************
     58          * Function Name  : Send_Byte
     59          * Description    : Send a byte
     60          * Input          : - c: Character
     61          * Output         : None
     62          * Return         : 0: Byte sent
     63          *******************************************************************************/
     64          static u32 Send_Byte (u8 c)
     65          {
     66            SerialPutChar(c);
     67            return 0;
     68          }
     69          
     70          /*******************************************************************************
     71          * Function Name  : Receive_Packet
     72          * Description    : Receive a packet from sender
     73          * Input 1        : - data
     74          * Input 2        : - length
     75          * Input 3        : - timeout
     76          * Output         : *length:
     77          *                  0: end of transmission
     78          *                  -1: abort by sender
     79          *                  >0: packet length
     80          * Return         : 0: normally return
     81          *                  -1: timeout or packet error
     82          *                  1: abort by user
     83          *******************************************************************************/
     84          static s32 Receive_Packet (u8 *data, s32 *length, u32 timeout)
     85          {
     86            u16 i, packet_size;
     87            u8 c;
     88            *length = 0;
     89            if (Receive_Byte(&c, timeout) != 0)
     90            {
     91              return -1;
     92            }
     93            switch (c)
     94            {
     95            case SOH:
     96              packet_size = PACKET_SIZE;
     97              break;
     98            case STX:
     99              packet_size = PACKET_1K_SIZE;
    100              break;
    101            case EOT:
    102              return 0;
    103            case CA:
    104              if ((Receive_Byte(&c, timeout) == 0) && (c == CA))
    105              {
    106                *length = -1;
    107                return 0;
    108              }
    109              else
    110              {
    111                return -1;
    112              }
    113            case ABORT1:
    114            case ABORT2:
    115              return 1;
    116            default:
    117              return -1;
    118            }
    119            *data = c;
    120            for (i = 1; i < (packet_size + PACKET_OVERHEAD); i ++)
    121            {
    122              if (Receive_Byte(data + i, timeout) != 0)
    123              {
    124                return -1;
    125              }
    126            }
    127            if (data[PACKET_SEQNO_INDEX] != ((data[PACKET_SEQNO_COMP_INDEX] ^ 0xff) & 0xff))
    128            {
    129              return -1;
    130            }
    131            *length = packet_size;
    132            return 0;
    133          }
    134          /*******************************************************************************
    135          * Function Name  : Ymodem_Receive
    136          * Description    : Receive a file using the ymodem protocol
    137          * Input          : Address of the first byte
    138          * Output         : None
    139          * Return         : The size of the file
    140          *******************************************************************************/
    141          uint32_t Ymodem_Receive (uint8_t *packet_buf,uint8_t cmd)
    142          {
    143            u8 packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD], file_size[FILE_SIZE_LENGTH], *file_ptr;
    144            s32 i, j, packet_length, session_done, file_done, packets_received, errors, session_begin, size = 0;
    145          
    146            for (session_done = 0, errors = 0, session_begin = 0; ;)
    147            {
    148              for (packets_received = 0, file_done = 0; ;)
    149              {
    150                switch (Receive_Packet(packet_data, &packet_length, NAK_TIMEOUT))
    151                {
    152                  case 0:
    153                    errors = 0;
    154                    switch (packet_length)
    155                    {
    156                      /* Abort by sender */
    157          			case - 1:    
    158                        Send_Byte(ACK);
    159                        return 0;
    160          			/* End of transmission */
    161                      case 0:     
    162                        Send_Byte(ACK);
    163                        file_done = 1;
    164                        break;
    165          			/* Normal packet */
    166                      default:    
    167                      if ((packet_data[PACKET_SEQNO_INDEX] & 0xff) != (packets_received & 0xff))
    168                      {
    169                        Send_Byte(NAK);
    170                      }
    171                      else
    172                      {
    173                        if (packets_received == 0)   
    174                        {/* Filename packet */
    175                          if (packet_data[PACKET_HEADER] != 0)    
    176                          {/* Filename packet has valid data */
    177                            for (i = 0, file_ptr = packet_data + PACKET_HEADER; (*file_ptr != 0) && (i < FILE_NAME_LENGTH);)
    178                            {
    179                              file_name[i++] = *file_ptr++;
    180                            }
    181                            file_name[i++] = '\0';
    182                            for (i = 0, file_ptr ++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);)
    183                            {
    184                              file_size[i++] = *file_ptr++;
    185                            }
    186                            file_size[i++] = '\0';
    187                            Str2Int(file_size, &size);
    188                            /* Test the size of the image to be sent */
    189                            /* Image size is greater than Flash size */
    190                            if (size > 0x0803FFFF) 
    191                            {
    192                              /* End session */
    193                              Send_Byte(CA);
    194                              Send_Byte(CA);
    195                              return -1;
    196                            }
    197          		     if(cmd==INTERNAL_FLASH)
    198          		     {
    199          				Internal_Flash_ErasePage();
    200          		     }
    201          		     else if(cmd==NOR_FLASH)
    202          		     {
    203          				NOR_Flash_ErasePage();
    204          				write_SW_infor_to_NorFlash();
    205          		     }
    206                            Send_Byte(ACK);
    207                            Send_Byte(CRC16);
    208                          }
    209                          else   /* Filename packet is empty, end session */
    210                          {
    211                            Send_Byte(ACK);
    212                            file_done = 1;
    213                            session_done = 1;
    214                            break;
    215                          }
    216                        }
    217                        else   /* Data packet */
    218                        {
    219                        	//decode the packet to hex mode  //scb
    220                          memcpy(packet_buf, packet_data + PACKET_HEADER, packet_length);
    221                          RamSource =(u32)packet_buf;
    222          		   
    223                          for (j = 0;(j < packet_length) && (FlashDestination <  ApplicationAddress + size);j += 4)
    224                          {
    225                            if(cmd==INTERNAL_FLASH)
    226          		     {
    227                               /* Program the data received into STM32F10x Flash */
    228                               FLASH_ProgramWord(FlashDestination, *(u32*)RamSource);
    229                               if (*(u32*)FlashDestination != *(u32*)RamSource)
    230                               {
    231                                   /* End session */
    232                                   Send_Byte(CA);
    233                                   Send_Byte(CA);
    234                                   return -2;
    235                               }
    236          		     }
    237          		     else if(cmd==NOR_FLASH)
    238          		     {
    239          		        uint32_t sw_data;
    240                               /* Write Tx_Buffer data to SPI FLASH memory */
    241                               sFLASH_WriteBuffer((uint8_t *)&RamSource,FlashDestination-ApplicationAddress, 4);
    242                               sFLASH_ReadBuffer((uint8_t *)&sw_data, FlashDestination-ApplicationAddress, 4); 
    243                               if (*(u32*)sw_data != *(u32*)RamSource)
    244                               {
    245                                   /* End session */
    246                                   Send_Byte(CA);
    247                                   Send_Byte(CA);
    248                                   return -2;
    249                               }
    250          		     }
    251                            FlashDestination += 4;
    252                            RamSource += 4;
    253                          }
    254                          Send_Byte(ACK);
    255                        }
    256                        packets_received ++;
    257                        session_begin = 1;
    258                      }
    259                    }
    260                    break;
    261                    case 1:
    262                      Send_Byte(CA);
    263                      Send_Byte(CA);
    264                      return -3;
    265                    default:
    266                    if (session_begin > 0)
    267                    {
    268                      errors ++;
    269                    }
    270                    if (errors > MAX_ERRORS)
    271                    {
    272                      Send_Byte(CA);
    273                      Send_Byte(CA);
    274                      return 0;
    275                    }
    276                    Send_Byte(CRC16);
    277                    break;
    278                }
    279                if (file_done != 0)
    280                {
    281                  break;
    282                }
    283              }
    284              if (session_done != 0)
    285              {
    286                break;
    287              }
    288            }
    289            return (s32)size;
    290          }
    291          /*******************************************************************************
    292          * Function Name  : Str2Int
    293          * Description    : Convert a string to an integer
    294          * Input 1        : - inputstr: The string to be converted
    295          *                  - intnum: The intger value
    296          * Output         : None
    297          * Return         : 1: Correct
    298          *                  0: Error
    299          *******************************************************************************/
    300          static u32 Str2Int(u8 *inputstr, s32 *intnum)
    301          {
    302            u32 i = 0, res = 0;
    303            u32 val = 0;
    304          
    305            if (inputstr[0] == '0' && (inputstr[1] == 'x' || inputstr[1] == 'X'))
    306            {
    307              if (inputstr[2] == '\0')
    308              {
    309                return 0;
    310              }
    311              for (i = 2; i < 11; i++)
    312              {
    313                if (inputstr[i] == '\0')
    314                {
    315                  *intnum = val;
    316                  /* return 1; */
    317                  res = 1; 
    318                  break;
    319                }
    320                if (ISVALIDHEX(inputstr[i]))
    321                {
    322                  val = (val << 4) + CONVERTHEX(inputstr[i]);
    323                }
    324                else
    325                {
    326                  /* return 0, Invalid input */
    327                  res = 0;
    328                  break;
    329                }
    330              }
    331              /* over 8 digit hex --invalid */
    332              if (i >= 11)
    333              {
    334                res = 0; 
    335              }
    336            }
    337            else /* max 10-digit decimal input */
    338            {
    339              for (i = 0;i < 11;i++)
    340              {
    341                if (inputstr[i] == '\0')
    342                {
    343                  *intnum = val;
    344                  /* return 1 */
    345                  res = 1;
    346                  break;
    347                }
    348                else if ((inputstr[i] == 'k' || inputstr[i] == 'K') && (i > 0))
    349                {
    350                  val = val << 10;
    351                  *intnum = val;
    352                  res = 1;
    353                  break;
    354                }
    355                else if ((inputstr[i] == 'm' || inputstr[i] == 'M') && (i > 0))
    356                {
    357                  val = val << 20;
    358                  *intnum = val;
    359                  res = 1;
    360                  break;
    361                }
    362                else if (ISVALIDDEC(inputstr[i]))
    363              {
    364                val = val * 10 + CONVERTDEC(inputstr[i]);
    365              }
    366                else
    367                {
    368                  /* return 0, Invalid input */
    369                  res = 0;
    370                  break;
    371                }
    372              }
    373              /* Over 10 digit decimal --invalid */
    374              if (i >= 11)
    375              {
    376                res = 0;
    377              }  
    378            }
    379          
    380            return res;
    381          }
    382          
    383          
    384          /*******************(C)COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  Receive_Byte
               16 -> SerialKeyPressed
       32  Receive_Packet
               32 -> Receive_Byte
        8  Send_Byte
                8 -> SerialPutChar
       12  Str2Int
     1096  Ymodem_Receive
             1096 -> FLASH_ProgramWord
             1096 -> Internal_Flash_ErasePage
             1096 -> NOR_Flash_ErasePage
             1096 -> Receive_Packet
             1096 -> Send_Byte
             1096 -> Str2Int
             1096 -> memcpy
             1096 -> sFLASH_ReadBuffer
             1096 -> sFLASH_WriteBuffer
             1096 -> write_SW_infor_to_NorFlash
        8  memcpy
                8 -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  EraseCounter
       1  FLASHStatus
       4  FlashDestination
       4  NbrOfPage
       2  PageSize
       4  RamSource
      34  Receive_Byte
     202  Receive_Packet
      12  Send_Byte
     244  Str2Int
     594  Ymodem_Receive
     256  file_name
      14  memcpy

 
   268 bytes in section .bss
     7 bytes in section .data
 1 120 bytes in section .text
 
 1 106 bytes of CODE memory (+ 14 bytes shared)
   275 bytes of DATA memory

Errors: none
Warnings: 3
